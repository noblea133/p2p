
// ==UserScript==
// @name         QuestionHub Row Label Tracker + Visual Feedback
// @namespace    amazon_ir_editor_row_label_feedback
// @version      2.2
// @description  Tracks label + row decisions and visually marks them immediately. Restores only on button click.
// @match        https://ir-editor.amazon.com/questionHub/*
// @grant        GM_getValue
// @grant        GM_setValue
// @run-at       document-idle
// ==/UserScript==

(function () {
  'use strict';

  const STORAGE_KEY = 'qh_row_decision_map_v2';
  const RESTORE_BTN_ID = 'qh-restore-decisions-btn';
  const QUESTION_SELECTOR = 'h5';
  const LABEL_SELECTOR = 'td.cluster-question-item-data-label';
  const ROW_SELECTOR = 'tr';

  let currentLabel = null;

  function getCurrentQuestion() {
    const h5 = document.querySelector(QUESTION_SELECTOR);
    return h5 ? h5.textContent.trim() : null;
  }

  function loadMap() {
    return GM_getValue(STORAGE_KEY, {});
  }

  function saveMap(map) {
    GM_setValue(STORAGE_KEY, map);
  }

  function recordDecision(asinId, label, row) {
    const q = getCurrentQuestion();
    if (!q || !asinId) return;

    const map = loadMap();
    map[q] = map[q] || [];

    const existing = map[q].find(e => e.asinId === asinId);
    if (existing) {
      existing.label = label;
    } else {
      map[q].push({ asinId, label });
    }

    saveMap(map);
    visuallyMarkRow(row, label);
    console.log(`[Saved] ${asinId} → ${label} under: ${q}`);
  }

  function extractASINFromRow(row) {
    const aTag = row.querySelector('a');
    if (!aTag) return null;
    const text = aTag.textContent.trim();
    if (/^B0[A-Z0-9]{8}$/.test(text)) return text;
    return null;
  }

  function visuallyMarkRow(row, label, color = 'dodgerblue') {
    if (!row) return;
    row.style.outline = `2px solid ${color}`;
    row.dataset.markedLabel = label;
    row.title = `Labeled: ${label}`;
  }

  function restoreForCurrentQuestion() {
    const q = getCurrentQuestion();
    if (!q) return alert('⚠️ No question found.');

    const map = loadMap();
    const decisions = map[q] || [];
    let restored = 0;

    decisions.forEach(({ asinId, label }) => {
      // Set label
      const labelCell = [...document.querySelectorAll(LABEL_SELECTOR)]
        .find(td => td.textContent.trim() === label);
      if (!labelCell) return;

      labelCell.click();
      currentLabel = label;

      // Click row
      const row = [...document.querySelectorAll(ROW_SELECTOR)].find(tr => {
        const rowAsin = extractASINFromRow(tr);
        return rowAsin === asinId;
      });

      if (row) {
        row.click();
        visuallyMarkRow(row, label, 'limegreen');
        restored++;
      }
    });

    alert(`✅ Restored ${restored} decision(s) for: "${q}"`);
    console.log(`[Restored] ${restored} rows for "${q}"`);
  }

  function injectRestoreButton() {
    if (document.getElementById(RESTORE_BTN_ID)) return;

    const btn = document.createElement('button');
    btn.id = RESTORE_BTN_ID;
    btn.textContent = 'Restore Decisions';
    Object.assign(btn.style, {
      position: 'fixed',
      bottom: '20px',
      right: '20px',
      zIndex: 9999,
      backgroundColor: '#0073bb',
      color: '#fff',
      padding: '10px 15px',
      fontSize: '14px',
      border: 'none',
      borderRadius: '5px',
      cursor: 'pointer',
      boxShadow: '0 2px 5px rgba(0,0,0,0.2)'
    });

    btn.onclick = restoreForCurrentQuestion;
    document.body.appendChild(btn);
  }

  function bindClicks() {
    // Label clicks
    document.querySelectorAll(LABEL_SELECTOR).forEach(label => {
      if (label.dataset.boundLabel) return;
      label.dataset.boundLabel = 'true';

      label.addEventListener('click', () => {
        currentLabel = label.textContent.trim();
        console.log('[Label Set]', currentLabel);
      });
    });

    // Row clicks
    document.querySelectorAll(ROW_SELECTOR).forEach(row => {
      if (row.dataset.boundRow) return;
      row.dataset.boundRow = 'true';

      row.addEventListener('click', () => {
        if (!currentLabel) return;
        const asinId = extractASINFromRow(row);
        if (asinId) {
          recordDecision(asinId, currentLabel, row);
        }
      });
    });
  }

  const observer = new MutationObserver(() => {
    injectRestoreButton();
    bindClicks();
  });

  observer.observe(document.body, { childList: true, subtree: true });

  window.addEventListener('load', () => {
    injectRestoreButton();
    bindClicks();
  });
})();
